/// Generator configuration for Prisma Client
generator client {
    provider = "prisma-client-js"
}

/// Database connection configuration
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// User role enumeration for access control
/// @default USER - Standard user access
enum UserRole {
    /// Regular user with basic platform access
    USER
    /// Administrator with elevated privileges for platform management
    ADMIN
    /// Platform owner with full system access
    OWNER
}

/// Status tracking for mentorship relationships
enum MentorshipStatus {
    PENDING    // Mentorship request awaiting confirmation
    ACTIVE     // Currently ongoing mentorship
    COMPLETED  // Successfully finished mentorship program
    CANCELED   // Prematurely ended mentorship
}

/// Status for mentorship matching suggestions
enum SuggestionStatus {
    /// New suggestion awaiting response
    PENDING
    /// Suggestion approved by both parties
    ACCEPTED
    /// Suggestion rejected by either party
    DECLINED
}

/// Gender enumeration for user profiles
enum Gender {
    MAN
    WOMAN
    NONBINARY
    TRANSGENDER
    OTHER
}

/// Technical skills for mentorship matching
model Skill {
    id        Int    @id @default(autoincrement())
    name      String
    slug      String
    /// Users who can mentor others in this skill
    mentors   User[] @relation("MentorSkills")
    /// Users seeking mentorship in this skill
    mentees   User[] @relation("MenteeSkills")
}

/// Seniority levels for users
model SeniorityLevel {
    id      Int    @id @default(autoincrement())
    name    String
    slug    String
    /// Users who have this seniority level as a mentor
    mentors User[] @relation("MentorSeniority")
    /// Users who have this seniority level as a mentee
    mentees User[] @relation("MenteeSeniority")
}

/// Goals for mentorship
model Goal {
    id      Int    @id @default(autoincrement())
    name    String
    slug    String
    /// Users who can mentor these goals
    mentors User[] @relation("MentorGoals")
    /// Users seeking mentorship with this goal
    mentees User[] @relation("MenteeGoals")
}

/// Soft skills for mentorship matching
model SoftSkill {
    id      Int    @id @default(autoincrement())
    name    String
    slug    String
    /// Users who can mentor these soft skills
    mentors User[] @relation("MentorSoftSkills")
    /// Users seeking mentorship for this soft skill
    mentees User[] @relation("MenteeSoftSkills")
}

/// Industry sectors for users
model Industry {
    id      Int    @id @default(autoincrement())
    name    String
    slug    String
    /// Users who have selected this as one of their industries
    users   User[] @relation("UserIndustries")
}

/// OAuth account information for NextAuth.js
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    /// Related user record
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

/// User session management for NextAuth.js
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    /// Related user record
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Core user model containing profile and relationship data
model User {
    id                      String     @id @default(cuid())
    name                    String?
    email                   String?    @unique
    emailVerified           DateTime?
    image                   String?
    title                   String?
    location                String?
    in_person               Boolean?
    about                   String?
    role                    UserRole   @default(USER)
    linkedin_url            String?
    availability            Json?
    notificationPreferences Json?
    onboardingCompletedAt   DateTime?
    active_mentor           Boolean    @default(false)
    active_mentee           Boolean    @default(false)
    mentor_capacity         Int?
    mentor_gender           Gender?
    mentee_gender           Gender[]
    bio                     String?
    motivation              String?
    side_projects           String?

    /// Connected OAuth accounts
    accounts                Account[]
    /// Active sessions
    sessions                Session[]
    /// Skills user can mentor others in
    mentorSkills            Skill[]        @relation("MentorSkills")
    /// Skills user wants to learn
    menteeSkills            Skill[]        @relation("MenteeSkills")
    /// Mentorships where user is the mentor
    mentorMentorships       Mentorship[]   @relation("MentorMentorships")
    /// Mentorships where user is the mentee
    menteeMentorships       Mentorship[]   @relation("MenteeMentorships")
    /// Messages sent by this user
    sentMessages            Message[]      @relation("SentMessages")
    /// Messages received by this user
    receivedMessages        Message[]      @relation("ReceivedMessages")
    /// Suggestions where user is the mentor
    suggestedMentor         Suggestion[]   @relation("SuggestedMentor")
    /// Suggestions where user is the mentee
    suggestedMentee         Suggestion[]   @relation("SuggestedMentee")
    /// Conversations where user is participant1
    participant1Conversations Conversation[] @relation("Participant1Conversations")
    /// Conversations where user is participant2
    participant2Conversations Conversation[] @relation("Participant2Conversations")
    /// Goals that the user can help mentees with
    mentorGoals             Goal[]         @relation("MentorGoals")
    /// Goals that the user wants mentorship for
    menteeGoals             Goal[]         @relation("MenteeGoals")
    /// Users seniority level as a mentor
    mentorSeniorityId       Int?
    mentorSeniority         SeniorityLevel? @relation("MentorSeniority", fields: [mentorSeniorityId], references: [id])
    /// Users seniority level as a mentee
    menteeSeniorityId       Int?
    menteeSeniority         SeniorityLevel? @relation("MenteeSeniority", fields: [menteeSeniorityId], references: [id])
    /// Soft skills that the user can help mentees with
    mentorSoftSkills        SoftSkill[]    @relation("MentorSoftSkills")
    /// Soft skills that the user wants mentorship for
    menteeSoftSkills        SoftSkill[]    @relation("MenteeSoftSkills")
    /// Industries that user has experience in
    industries              Industry[]     @relation("UserIndustries")
}

/// Verification tokens for passwordless authentication
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

/// Mentorship relationship tracking
model Mentorship {
    id              String           @id @default(cuid())
    mentorId        String
    menteeId        String
    startDate       DateTime
    endDate         DateTime?
    status          MentorshipStatus @default(PENDING)
    goals           Json?
    notes           String?

    /// Related mentor user record
    mentor          User             @relation("MentorMentorships", fields: [mentorId], references: [id])
    /// Related mentee user record
    mentee          User             @relation("MenteeMentorships", fields: [menteeId], references: [id])
    /// Messages exchanged during mentorship
    messages        Message[]        @relation("MentorshipMessages")
    /// Meetings scheduled in this mentorship
    meetings        Meeting[]        @relation("MentorshipMeetings")
}

/// Communication messages between users
model Message {
    id             String    @id @default(cuid())
    mentorshipId   String?
    conversationId String?
    senderId       String
    receiverId     String
    content        String
    sentAt         DateTime  @default(now())

    /// Related mentorship record
    mentorship     Mentorship?   @relation("MentorshipMessages", fields: [mentorshipId], references: [id], onDelete: Cascade)
    /// Related conversation record
    conversation   Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
    /// Related sender user record
    sender         User          @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
    /// Related recipient user record
    receiver       User          @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

/// Mentorship matching suggestions
model Suggestion {
    id       String           @id @default(cuid())
    mentorId String
    menteeId String
    status   SuggestionStatus @default(PENDING)

    /// Related mentor user record
    mentor   User             @relation("SuggestedMentor", fields: [mentorId], references: [id])
    /// Related mentee user record
    mentee   User             @relation("SuggestedMentee", fields: [menteeId], references: [id])
}

/// Conversation model for user interactions
/// Conversation model for user interactions
model Conversation {
    id              String       @id @default(cuid())
    participant1Id  String
    participant2Id  String
    messages        Message[]    @relation("ConversationMessages")

    /// Related participant1 user record
    participant1    User         @relation("Participant1Conversations", fields: [participant1Id], references: [id])
    /// Related participant2 user record
    participant2    User         @relation("Participant2Conversations", fields: [participant2Id], references: [id])
}

/// Meeting details for scheduled mentorship sessionss
model Meeting {
    id           String     @id @default(cuid())
    mentorshipId String
    scheduledAt  DateTime
    duration     Int
    location     String?
    notes        String?

    /// Related mentorship record
    mentorship   Mentorship @relation("MentorshipMeetings", fields: [mentorshipId], references: [id], onDelete: Cascade)
}
